/*!***************************************************************************************************************************************************************!*\
  !*** css ./node_modules/css-loader/dist/cjs.js??ruleSet[1].rules[0].use[1]!./node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[0].use[2]!./src/app.scss ***!
  \***************************************************************************************************************************************************************/
:root {
  --nav-height: 40px;
}

main,
body {
  display: block;
  margin: 0;
  padding: 0;
}

header {
  background-color: orange;
}

.wrapper {
  background-color: red;
}
.wrapper .container {
  background-color: yellow;
}

.container > section > div {
  background-color: #536dff;
}
.container > section.double > div {
  background-color: #2042ff;
}
.container > section.triple > div {
  background-color: #0024ec;
}
.container > section.quad > div {
  background-color: #001cb9;
}

.wrapper + .wrapper {
  margin-top: 1em;
}
.wrapper > .container > section {
  margin-top: 0;
}

@media (min-width: 900px) {
  body {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }

  .wrapper {
    display: flex;
    justify-content: center;
  }

  .container {
    align-self: center;
    width: 900px;
    height: auto;
  }
}
@media (min-width: 1310px) {
  .container {
    width: 1310px;
  }
}
.container > section {
  display: block;
  margin-top: 1em;
}
.container > section > div {
  color: white;
  font-family: monospace;
  font-size: 13px;
  height: 200px;
  min-width: 0;
  padding: 0.5em;
}
.container > section > div + div {
  margin-left: 0;
  margin-top: 1em;
}
.container > section + section {
  margin-top: 1em;
}

@media (min-width: 600px) {
  .container > section {
    display: flex;
    flex-wrap: wrap;
    width: auto;
    flex-grow: 1;
  }
  .container > section > div {
    flex: auto;
  }
  .container > section > div + div {
    margin-top: 0;
    margin-left: 1em;
  }
}
@media (min-width: 900px) {
  .container > section {
    display: flex;
    flex-wrap: wrap;
  }
}
@media (min-width: 1025px) {
  .container > section > div + div {
    margin-top: 0;
    margin-left: 1em;
  }
}
@media (min-width: 600px) {
  .container > .double > div {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 45%;
  }
}
@media (min-width: 600px) {
  .container > .triple > div {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 25%;
  }
}
.container > .quad > div.break {
  flex-basis: 100%;
  display: block;
  height: 0;
  padding: 0;
  margin-top: 0;
}

@media (min-width: 600px) {
  .container > .quad > div {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 45%;
  }
  .container > .quad > div.break {
    margin-top: 1em;
  }
  .container > .quad > div:nth-child(4n) {
    margin-left: 0;
  }
}
@media (min-width: 1310px) {
  .container > .quad > div {
    flex-grow: 1;
    flex-shrink: 0;
    flex-basis: 20%;
  }
  .container > .quad > div.break {
    display: none;
  }
  .container > .quad > div:nth-child(4n) {
    margin-left: 1em;
  }
}

/*# sourceMappingURL=data:application/json;charset=utf-8;base64,*/